# If this is your first time writing a language grammar, check out:
#   - http://manual.macromates.com/en/language_grammars

'scopeName': 'source.ptrs'
'name': 'PointerScript'
'fileTypes': [
	'ptrs'
]
'repository': {
	'string_escaped_char': {
		'patterns': [
			{
				'match': '\\\\([0-7]+|x[0-9a-fA-F]+|.)',
				'name': 'constant.character.escape.ptrs'
			},
			{
				'match': '%-?\\+? ?#?0?(\\d+|\\*)?(\\.(\\d+|\\*))?((hh)|h|l|(ll)|j|z|t|L)?[diuoxXfFeEgGaAcspn%]',
				'name': 'constant.other.placeholder.ptrs'
			}
		]
	},
	'comment_open': {
		'patterns': [
			{
				'match': '/\\*'
				'name': 'invalid.illegal.ptrs'
			}
		]
	}
}
'patterns': [
	{
		'name': 'comment.line.ptrs'
		'match': '//[^\\n]*'
	}
	{
		'name': 'comment.line.shebang.ptrs'
		'match': '#![^\\n]*'
	}
	{
		'name': 'comment.block.ptrs'
		'begin': '/\\*'
		'end': '\\*/'
		'patterns': [
			{
				'include': '#comment_open'
			}
		]
	}
	{
		'name': 'keyword.operator.ptrs'
		'match': '\\b(cast|cast_stack|as|sizeof|typeof|type|new|new_stack|map|this|instanceof)\\b'
	}
	{
		'name': 'keyword.control.ptrs'
		'match': '\\b(struct|constructor|destructor|operator|private|static|get|set|delete|'+
			'function|var|const|import|from|if|else|switch|case|default|yield|scoped|'+
			'while|do|for|foreach|in|try|catch|throw|continue|break|return|asm)\\b'
	}
	{
		'name': 'support.type.ptrs'
		'match': '\\b(undefined|int|float|native|pointer|function|struct|' +
				'char|short|int|long|longlong|i8|i16|i32|i64|' +
				'uchar|ushort|uint|ulong|ulonglong|u8|u16|u32|u64|' +
				'single|double|native|pointer)\\b'
	}
	{
		'begin': 'asm\\s+([a-zA-Z0-9_]+)?(\\s+,\\s+[a-zA-Z0-9_]+)*\\s+\\{'
		'end': '}'
		'patterns': [
			{
				'include': 'source.s'
			}
		]
	}
	{
		'name': 'constant.language.ptrs'
		'match': '\\b(true|false|null|NULL|VARSIZE|PTRSIZE|undefined|NaN)\\b'
	}
	{
		'name': 'string.quoted.other.ptrs'
		'begin': '`'
		'end': '`'
	}
	{
		'name': 'string.quoted.double.ptrs'
		'begin': '"'
		'end': '"'
		'patterns': [
			{
				'include': '#string_escaped_char'
			}
		]
	}
	{
		'name': 'string.quoted.single.ptrs'
		'begin': '\''
		'end': '\''
		'patterns': [
			{
				'include': '#string_escaped_char'
			}
		]
	}
	{
		'name': 'constant.numeric.ptrs'
		'match': '\\b((0x[0-9a-fA-F]+)|([0-9]+((\\.[0-9]+)|[fF])?))\\b'
	}
	{
		'name': 'support.function.any-method.ptrs'
		'match': '[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*\\()'
	}
]
